cmake_minimum_required (VERSION 2.6)

project (CDASDAQ)

set (CMAKE_INSTALL_PREFIX ${prefix} CACHE INTERNAL "")
set (CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules )
# this fails because of the use of assert in Pm. Should be cleaned up
#set (CMAKE_BUILD_TYPE "release")

set (CDASDAQ_VERSION_MAJOR "1")       # numerical
set (CDASDAQ_VERSION_MINOR "9")       # numerical
set (CDASDAQ_VERSION_PATCH "0")       # numerical

# VERBOSE Makefiles for CDAS or not...
set ( CMAKE_VERBOSE_MAKEFILE false )
set ( CMAKE_CXX_FLAGS "-Wno-write-strings -std=c++20" )

#### Install location
if (DEFINED prefix)
  set (prefix ${prefix} CACHE PATH "Installation directory")
else (DEFINED prefix)
  if (DEFINED ENV{CDASDAQ_INSTALL})
    set (prefix $ENV{CDASDAQ_INSTALL} CACHE PATH "Installation directory")
    message (STATUS "Package will be installed in CDASDAQ_INSTALL
     (${prefix}). Unset this variable if you don't want this. ")
  else (DEFINED  ENV{CDASDAQ_INSTALL})
    set (prefix "/Raid/opt/CDAS" CACHE PATH "Installation directory")
    message (STATUS "Installing in default directory (${prefix}). Set CDASDAQ_INSTALL if it's not what you want")
 endif (DEFINED ENV{CDASDAQ_INSTALL})
endif (DEFINED prefix)

set (CMAKE_INSTALL_PREFIX ${prefix})
# RPATH for CDAS, from https://cmake.org/Wiki/CMake_RPATH_handling
# use, i.e. don't skip the full RPATH for the build tree
SET(CMAKE_SKIP_BUILD_RPATH  FALSE)

# when building, don't use the install RPATH already
# (but later on when installing)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

SET(CMAKE_INSTALL_RPATH "${prefix}/lib")

# add the automatically determined parts of the RPATH
# which point to directories outside the build tree to the install RPATH
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)


# the RPATH to be used when installing, but only if it's not a system directory
LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${prefix}/lib" isSystemDir)
IF("${isSystemDir}" STREQUAL "-1")
   SET(CMAKE_INSTALL_RPATH "${prefix}/lib")
ENDIF("${isSystemDir}" STREQUAL "-1")

# FIXME UGLY: needed to add a ${CMAKE_BINARY_DIR}/IkPaX for the files generated by a perl script in IkPaX, proper dependencies so it compiles with -j, etc.
set (IKPAX_INCDIR ${PROJECT_SOURCE_DIR}/Apps/IkPaX ${CMAKE_BINARY_DIR}/Apps/IkPaX)
set (CL_INCDIR ${PROJECT_SOURCE_DIR}/Utils/CL ${IKPAX_INCDIR})
set (CSET_INCDIR ${PROJECT_SOURCE_DIR}/Utils/CSet ${CL_INCDIR})
set (UI_INCDIR ${PROJECT_SOURCE_DIR}/Utils/Ui ${CSET_INCDIR})
set (GS_INCDIR ${PROJECT_SOURCE_DIR}/Utils/Gs ${UI_INCDIR})
set (GNC_INCDIR ${PROJECT_SOURCE_DIR}/Utils/Gnc ${GS_INCDIR})
set (CDASDAQ_INCDIR ${GNC_INCDIR}  ${PROJECT_SOURCE_DIR}/Utils/DbC)
set (CDASDAQCLIENT_INCDIR ${CDASDAQ_INCDIR} ${PROJECT_SOURCE_DIR}/Apps/Pm)
set (STCoordinates_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/Offline/STCoordinates)
set (IoSd_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/Offline/IoSd)
set (MoIO_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/Offline/MoIO)
set (spmtIO_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/Offline/spmtIO)

find_package(MySQL REQUIRED)

include (AugerUtilityMacros)
find_package(Root REQUIRED)
include_directories("${ROOT_INCLUDE_DIR}")

find_package(Boost REQUIRED)

#### CDAS packages
# Ik Server
add_subdirectory(Apps/IkPaX)

# Utils
add_subdirectory(Utils/CL)
add_subdirectory(Utils/CSet)
add_subdirectory(Utils/Ui)
add_dependencies(Ui IkPaX)
add_subdirectory(Utils/Gs)
add_dependencies(Gs IkPaX)
add_subdirectory(Utils/Gnc)
add_dependencies(Gnc IkPaX)
add_subdirectory(Utils/DbC)

# I/O and other packages present in CDAS. Note: include installation was removed
add_subdirectory(Offline/STCoordinates)
add_subdirectory(Offline/IoSd)
add_subdirectory(Offline/MoIO)
add_subdirectory(Offline/spmtIO)

# CDAS processes
add_subdirectory(Apps/Pm)
add_subdirectory(Apps/Fd)
add_subdirectory(Apps/Eb)
add_subdirectory(Apps/Mr)
add_subdirectory(Apps/Rc)
add_subdirectory(Apps/Xb)
add_subdirectory(Apps/sPMT)
add_subdirectory(Apps/SDDownload)
